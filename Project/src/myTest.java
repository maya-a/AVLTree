import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Random;

public class myTest {
    public static void main(String[] args) {
        int size = 1000;
        int[] randomArray = {529, 816, 455, 708, 58, 314, 705, 133, 272, 195, 259, 4, 254, 961, 470, 549, 940, 256, 830, 882, 14, 64, 438, 560, 499, 291, 895, 944, 879, 827, 103, 456, 753, 665, 196, 55, 635, 991, 748, 427, 451, 126, 150, 771, 403, 351, 896, 533, 32, 640, 240, 589, 321, 893, 255, 832, 406, 43, 244, 925, 712, 883, 631, 496, 514, 54, 820, 734, 153, 725, 950, 349, 751, 25, 973, 422, 724, 136, 91, 772, 96, 225, 546, 700, 839, 22, 487, 802, 163, 889, 361, 780, 904, 564, 604, 702, 376, 628, 616, 612, 296, 504, 9, 421, 651, 906, 887, 68, 835, 822, 655, 537, 155, 907, 398, 914, 692, 220, 790, 553, 168, 248, 41, 2, 271, 903, 326, 828, 191, 140, 545, 521, 446, 85, 182, 860, 561, 418, 173, 696, 443, 726, 979, 205, 658, 40, 829, 733, 516, 464, 530, 82, 847, 875, 928, 781, 810, 863, 695, 579, 495, 383, 711, 66, 610, 118, 204, 492, 993, 843, 984, 921, 876, 591, 966, 836, 722, 407, 325, 210, 691, 791, 768, 109, 951, 71, 865, 697, 870, 236, 908, 172, 686, 355, 462, 233, 614, 528, 572, 938, 562, 985, 278, 194, 142, 77, 641, 953, 934, 916, 899, 744, 386, 594, 129, 924, 127, 297, 792, 623, 491, 643, 682, 167, 308, 494, 785, 915, 65, 417, 185, 393, 353, 18, 135, 367, 837, 329, 992, 520, 503, 506, 862, 429, 952, 923, 473, 373, 281, 932, 854, 983, 866, 323, 141, 746, 855, 174, 21, 463, 113, 922, 902, 557, 356, 510, 508, 539, 563, 737, 7, 47, 269, 322, 762, 379, 552, 890, 841, 224, 627, 644, 395, 989, 306, 632, 766, 582, 454, 715, 266, 198, 710, 970, 603, 880, 80, 144, 956, 996, 467, 156, 425, 61, 605, 694, 727, 798, 585, 304, 424, 377, 663, 57, 176, 634, 656, 332, 736, 260, 348, 542, 755, 969, 222, 555, 720, 611, 79, 83, 317, 217, 318, 760, 175, 601, 412, 776, 436, 170, 448, 413, 279, 884, 73, 749, 576, 331, 532, 479, 459, 370, 538, 37, 245, 231, 497, 554, 435, 350, 181, 642, 63, 154, 872, 461, 476, 930, 541, 659, 401, 201, 148, 758, 119, 570, 337, 374, 253, 958, 358, 263, 15, 814, 423, 852, 110, 853, 517, 378, 229, 731, 241, 310, 299, 13, 215, 823, 368, 507, 90, 342, 485, 382, 765, 968, 846, 46, 826, 437, 60, 511, 39, 124, 330, 886, 334, 964, 405, 704, 688, 149, 980, 10, 428, 999, 805, 945, 177, 815, 275, 834, 211, 285, 963, 180, 480, 493, 375, 667, 159, 264, 56, 716, 584, 770, 522, 936, 430, 381, 312, 132, 683, 660, 420, 75, 432, 184, 24, 609, 364, 657, 489, 534, 590, 389, 892, 431, 267, 756, 84, 621, 933, 675, 490, 626, 670, 842, 284, 757, 498, 315, 242, 12, 811, 620, 742, 910, 994, 617, 917, 653, 251, 622, 685, 89, 346, 243, 419, 387, 598, 257, 328, 36, 607, 178, 442, 274, 974, 365, 599, 76, 524, 833, 947, 187, 801, 988, 654, 106, 668, 372, 588, 137, 568, 981, 280, 362, 51, 93, 502, 885, 23, 505, 49, 759, 219, 638, 861, 990, 336, 94, 402, 666, 235, 33, 857, 982, 891, 567, 27, 408, 416, 145, 519, 290, 773, 741, 977, 164, 630, 821, 409, 122, 788, 812, 927, 878, 390, 769, 29, 171, 597, 571, 948, 477, 574, 128, 237, 98, 143, 929, 732, 995, 478, 687, 877, 97, 825, 523, 723, 580, 920, 600, 396, 844, 53, 160, 595, 404, 501, 858, 592, 207, 293, 536, 246, 234, 804, 919, 276, 813, 775, 151, 262, 900, 313, 967, 856, 238, 535, 287, 698, 101, 602, 575, 131, 228, 391, 509, 458, 426, 252, 661, 111, 673, 959, 309, 518, 997, 444, 777, 354, 69, 460, 799, 593, 672, 397, 747, 787, 301, 845, 874, 719, 500, 868, 130, 629, 338, 107, 400, 52, 556, 475, 100, 5, 457, 320, 78, 718, 559, 112, 152, 909, 447, 939, 468, 618, 678, 483, 189, 662, 606, 31, 869, 680, 44, 806, 1000, 265, 48, 646, 639, 784, 615, 213, 114, 190, 525, 121, 352, 292, 873, 838, 388, 162, 740, 394, 960, 16, 452, 735, 763, 307, 761, 664, 578, 850, 714, 26, 739, 218, 647, 273, 1, 363, 303, 335, 577, 548, 650, 199, 441, 223, 466, 158, 808, 453, 116, 824, 258, 88, 676, 415, 971, 818, 794, 165, 35, 169, 586, 905, 949, 86, 139, 482, 316, 117, 807, 831, 608, 125, 671, 976, 527, 288, 782, 779, 840, 92, 239, 848, 583, 566, 123, 472, 319, 897, 674, 789, 357, 232, 247, 102, 913, 912, 484, 371, 795, 81, 300, 45, 547, 596, 99, 206, 803, 942, 881, 433, 42, 67, 954, 972, 289, 955, 693, 340, 369, 526, 179, 721, 277, 311, 962, 283, 544, 72, 62, 796, 864, 699, 941, 587, 208, 800, 20, 648, 867, 341, 793, 488, 957, 652, 738, 684, 859, 987, 717, 706, 975, 166, 754, 298, 750, 543, 569, 637, 888, 261, 681, 333, 565, 445, 707, 965, 633, 649, 931, 157, 380, 581, 434, 410, 399, 202, 115, 414, 851, 730, 551, 95, 690, 701, 8, 625, 366, 752, 471, 531, 200, 50, 134, 937, 305, 294, 573, 809, 120, 729, 250, 214, 345, 898, 411, 986, 677, 324, 138, 339, 689, 161, 481, 11, 486, 764, 679, 327, 104, 188, 226, 817, 268, 385, 946, 70, 216, 343, 636, 767, 745, 282, 911, 384, 28, 59, 783, 87, 197, 645, 540, 849, 797, 449, 212, 360, 209, 439, 17, 978, 270, 74, 295, 6, 3, 302, 249, 221, 871, 515, 108, 613, 465, 778, 192, 774, 819, 193, 203, 344, 669, 624, 469, 183, 450, 30, 286, 728, 105, 474, 512, 943, 926, 38, 513, 998, 935, 918, 392, 709, 558, 713, 440, 34, 743, 147, 901, 786, 230, 347, 619, 550, 894, 19, 146, 359, 703, 186, 227};

//      Integer[] randomArray = new Integer[size];
//        for (int i = 0; i<size; i++) {
//           randomArray[i] = i + 1;
//        }
//
//        List<Integer> intList = Arrays.asList(randomArray);
//        Collections.shuffle(intList);
//        intList.toArray(randomArray);

        System.out.println(Arrays.toString(randomArray));
        experimentAVLTree2 randomSplitTree = new experimentAVLTree2();
        experimentAVLTree2 leftMaxSplitTree = new experimentAVLTree2();

        for (int node = 0; node < size; node++) {
            randomSplitTree.insert(randomArray[node], "num" + randomArray[node]);
            leftMaxSplitTree.insert(randomArray[node], "num" + randomArray[node]);
        }
        experimentAVLTree2.IAVLNode x = leftMaxSplitTree.getRoot();
        if (x.getLeft().isRealNode()) {
            x = x.getLeft();
            while (x.getRight().isRealNode()) {
                x = x.getRight();
            }
        }
//        int[] joinCostLeft = leftMaxSplitTree.split(x.getKey());
        Random rand = new Random();
        int y = 351;//rand.nextInt(size) + 1;
        System.out.println("y=" + y);
        int[] joinCostRandom = randomSplitTree.split(y);
        System.out.println("done");
    }
}
